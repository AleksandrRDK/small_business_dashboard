import { useParams, useNavigate, useLocation  } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { useState, useEffect } from "react";
import "./ClientDetail.scss";
import { removeClient, updateClient, Client } from "../../store/slices/clientsSlice";
import { RootState, AppDispatch } from "../../store/store";

const ClientDetail = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const dispatch: AppDispatch = useDispatch();
    const location = useLocation();

    const clients = useSelector((state: RootState) => state.clients.clients);
    const client = clients.find((c) => c.id === id);
    const orders = useSelector((state: RootState) => state.orders.orders);
    const clientOrders = orders.filter((order) => String(order.clientId) === id)

    const [isEditing, setIsEditing] = useState(false);

    const [formData, setFormData] = useState<Omit<Client, "id" | "registrationDate">>({
        name: client?.name || "",
        phone: client?.phone || "",
        email: client?.email || "",
        address: client?.address || "",
        notes: client?.notes || "",
        favorites: client?.favorites || false,
    });

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç
    useEffect(() => {
        if (!client) {
            navigate("/clients");
        }
    }, [client, navigate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    // –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleEdit = () => setIsEditing(true);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleSave = () => {
        if (!formData.name.trim() || !formData.phone.trim()) {
            alert("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.");
            return;
        }
        if (!client) {
            console.error("Client not found during save operation.");
            return;
        } // –ï—Å–ª–∏ client –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        const updatedClient: Client = {
            ...client, // –ë–µ—Ä—ë–º id –∏ registrationDate –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            ...formData, // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        };

        dispatch(updateClient(updatedClient)); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å —Ç–∏–ø–æ–º Client –≤ Redux
        setIsEditing(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    };

    // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleCancel = () => {
        setFormData({
            name: client?.name || "",
            phone: client?.phone || "",
            email: client?.email || "",
            address: client?.address || "",
            notes: client?.notes || "",
            favorites: client?.favorites || false,
        });
        setIsEditing(false);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    const handleDelete = () => {
        dispatch(removeClient(client!.id));
        navigate("/clients");
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
    const handleBack = () => navigate("/clients");

    if (!client) {
        return null; // –ò–ª–∏ –ª—É—á—à–µ return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p> –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è useEffect
    }

    // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω–æ

    const handleOrder = (id: string) => {
      navigate(`/order/${id}`, {state: { from: location.pathname}});
    }

    return (
        <div className="client-detail">
          <header className="client-detail__header">
            {!isEditing ? <button
              className="client-detail__btn client-detail__btn--back"
              onClick={handleBack}
            >
              ‚Üê
            </button> : <div></div>}
            <h2>{isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞" : client.name}</h2>
            <div className="client-detail__actions">
              {isEditing ? (
                <>
                  <button
                    className="client-detail__btn client-detail__btn--save"
                    onClick={handleSave}
                  >
                    üíæ
                  </button>
                  <button
                    className="client-detail__btn client-detail__btn--cancel"
                    onClick={handleCancel}
                  >
                    ‚ùå
                  </button>
                </>
              ) : (
                <>
                  <button
                    className="client-detail__btn client-detail__btn--edit"
                    onClick={handleEdit}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className="client-detail__btn client-detail__btn--delete"
                    onClick={handleDelete}
                  >
                    üóëÔ∏è
                  </button>
                </>
              )}
            </div>
          </header>

          <div className="client-detail__content">
          {isEditing ? (
            <form className="client-detail__form">
              <div className="client-detail__form-group">
                <label htmlFor="name" className="client-detail__form-label">
                  –ò–º—è:
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="client-detail__form-input"
                />
              </div>
              <div className="client-detail__form-group">
                <label htmlFor="phone" className="client-detail__form-label">
                  –¢–µ–ª–µ—Ñ–æ–Ω:
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  className="client-detail__form-input"
                />
              </div>
              <div className="client-detail__form-group">
                <label htmlFor="email" className="client-detail__form-label">
                  Email:
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="client-detail__form-input"
                />
              </div>
              <div className="client-detail__form-group">
                <label htmlFor="address" className="client-detail__form-label">
                  –ê–¥—Ä–µ—Å:
                </label>
                <input
                  type="text"
                  id="address"
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  className="client-detail__form-input"
                />
              </div>
              <div className="client-detail__form-group">
                <label htmlFor="notes" className="client-detail__form-label">
                  –ó–∞–º–µ—Ç–∫–∏:
                </label>
                <textarea
                  id="notes"
                  name="notes"
                  value={formData.notes}
                  onChange={handleChange}
                  className="client-detail__form-textarea"
                />
              </div>
              <div className="client-detail__form-group">
                <label htmlFor="favorites" className="client-detail__form-label">
                  –ò–∑–±—Ä–∞–Ω–Ω—ã–π:
                </label>
                <input
                  type="checkbox"
                  id="favorites"
                  name="favorites"
                  checked={formData.favorites}
                  onChange={(e) =>
                    setFormData((prev) => ({
                      ...prev,
                      favorites: e.target.checked,
                    }))
                  }
                  className="client-detail__form-checkbox"
                />
              </div>
            </form>
          ) : (
            <div className="client-detail__info">
              <p>
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {client.phone}
              </p>
              <p>
                <strong>Email:</strong> {client.email}
              </p>
              <p>
                <strong>–ê–¥—Ä–µ—Å:</strong> {client.address}
              </p>
              <p>
                <strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> {client.registrationDate}
              </p>
              <p>
                <strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {client.notes || "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫"}
              </p>
              <p>
                <strong>–ò–∑–±—Ä–∞–Ω–Ω—ã–π:</strong> {client.favorites ? "–î–∞" : "–ù–µ—Ç"}
              </p>
            </div>
          )}
              {/* –°–µ–∫—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ */}
            {isEditing ? <></> :
            <section className="client-detail__orders">
            <h3>–ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞</h3>
            {clientOrders.length > 0 ? (
                <ul className="client-detail__orders-list">
                    {clientOrders.map((order) => (
                        <li key={order.id} className="client-detail__orders-item" onClick={() => handleOrder(order.id)}>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> {order.orderNumber}</p>
                            <p><strong>–î–∞—Ç–∞:</strong> {order.date}</p>
                            <p><strong>–°—É–º–º–∞:</strong> {order.total} ‚ÇΩ</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {order.status}</p>
                        </li>
                    ))}
                </ul>
            ) : (
                <p>–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>
            )}
        </section>
            }
          </div>
        </div>
      );


};

export default ClientDetail;