import { FaCheckCircle, FaHourglassHalf, FaTimesCircle } from "react-icons/fa";
import { useParams, useNavigate, useLocation, Link } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { useState } from "react";
import { Order, removeOrder, updateOrder } from "../../store/slices/ordersSlice";
import { RootState, AppDispatch } from "../../store/store";
import "./OrderDetail.scss";

const OrderDetail = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const dispatch: AppDispatch = useDispatch();
    const location = useLocation();

    const orders = useSelector((state: RootState) => state.orders.orders);
    const clients = useSelector((state: RootState) => state.clients.clients);

    const order = orders.find((o) => o.id === id);

    const [errors, setErrors] = useState({
        clientId: "",
        total: "",
    });

    const [isEditing, setIsEditing] = useState(false);
    const [formData, setFormData] = useState<Omit<Order, "id" | "date" | "orderNumber">>({
        clientId: order?.clientId || "",
        status: order?.status || "",
        total: order?.total || "",
        notes: order?.notes || "",
    });

    if (!order) {
        return <p className="order-detail__error">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;
    }

    const selectClientNameById = (clientId: string) => {
        const client = clients.find((client) => client.id === clientId);
        return client ? client.name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç";
    };

    const handleEdit = () => setIsEditing(true);

    const handleStatusChange = (newStatus: string) => {
        setFormData((prev) => ({ ...prev, status: newStatus }));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const validateForm = () => {
        const newErrors = {
            clientId: "",
            total: "",
        };

        if (!formData.clientId) {
            newErrors.clientId = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.";
        }

        if (!formData.total || Number(formData.total) < 50) {
            newErrors.total = "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 ‚ÇΩ.";
        }

        setErrors(newErrors);
        return !newErrors.clientId && !newErrors.total;
    };

    const handleSave = () => {
        if (!validateForm()) {
            return;
        }

        const updatedOrder: Order = {
            ...order,
            ...formData,
        };

        dispatch(updateOrder(updatedOrder));
        setIsEditing(false);
    };

    const handleCancel = () => {
        setFormData({
            clientId: order?.clientId || "",
            status: order?.status || "",
            total: order?.total || "",
            notes: order?.notes || "",
        });
        setIsEditing(false);
    };

    const handleDelete = () => {
        dispatch(removeOrder(order.id));
        navigate("/orders");
    };

    const handleBack = () => {
        const fromPath = location.state?.from || "/orders";
        navigate(fromPath);
    };

    return (
        <div className="order-detail">
            <header className="order-detail__header">
                {!isEditing ? (
                    <button className="order-detail__btn order-detail__btn--back" onClick={handleBack}>
                        ‚Üê
                    </button>
                ) : (
                    <div></div>
                )}
                <h2>{isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞" : `–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber}`}</h2>
                <div className="order-detail__actions">
                    {isEditing ? (
                        <>
                            <button className="order-detail__btn order-detail__btn--save" onClick={handleSave}>
                                üóÉÔ∏è
                            </button>
                            <button className="order-detail__btn order-detail__btn--cancel" onClick={handleCancel}>
                                ‚ùå
                            </button>
                        </>
                    ) : (
                        <>
                            <button className="order-detail__btn order-detail__btn--edit" onClick={handleEdit}>
                                ‚úèÔ∏è
                            </button>
                            <button className="order-detail__btn order-detail__btn--delete" onClick={handleDelete}>
                                üóëÔ∏è
                            </button>
                        </>
                    )}
                </div>
            </header>

            <div className="order-detail__content">
                {isEditing ? (
                    <form className="order-detail__form">
                        <div className="order-detail__form-group">
                            <label htmlFor="clientId" className="order-detail__form-label">
                                –ö–ª–∏–µ–Ω—Ç:
                            </label>
                            <select
                                id="clientId"
                                name="clientId"
                                value={formData.clientId}
                                onChange={handleChange}
                                className="order-detail__form-input"
                            >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
                                {clients.map((client) => (
                                    <option key={client.id} value={client.id}>
                                        {client.name}
                                    </option>
                                ))}
                            </select>
                            {errors.clientId && <p className="order-detail__error">{errors.clientId}</p>}
                        </div>
                        <div className="order-detail__form-group">
                            <label className="order-detail__form-label">–°—Ç–∞—Ç—É—Å:</label>
                            <div className="order-detail__status-icons">
                                <div
                                    className={`status-icon-wrapper completed ${formData.status === "–ó–∞–≤–µ—Ä—à–µ–Ω" ? "selected" : ""}`}
                                    onClick={() => handleStatusChange("–ó–∞–≤–µ—Ä—à–µ–Ω")}
                                >
                                    <FaCheckCircle />
                                </div>
                                <div
                                    className={`status-icon-wrapper in-progress ${formData.status === "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" ? "selected" : ""}`}
                                    onClick={() => handleStatusChange("–í –ø—Ä–æ—Ü–µ—Å—Å–µ")}
                                >
                                    <FaHourglassHalf />
                                </div>
                                <div
                                    className={`status-icon-wrapper cancelled ${formData.status === "–û—Ç–º–µ–Ω–µ–Ω" ? "selected" : ""}`}
                                    onClick={() => handleStatusChange("–û—Ç–º–µ–Ω–µ–Ω")}
                                >
                                    <FaTimesCircle />
                                </div>
                            </div>
                        </div>
                        <div className="order-detail__form-group">
                            <label htmlFor="total" className="order-detail__form-label">
                                –°—É–º–º–∞:
                            </label>
                            <input
                                type="number"
                                id="total"
                                name="total"
                                className="order-detail__form-input"
                                value={formData.total}
                                onChange={handleChange}
                            />
                            {errors.total && <p className="order-detail__error">{errors.total}</p>}
                        </div>
                        <div className="order-detail__form-group">
                            <label htmlFor="notes" className="order-detail__form-label">
                                –ó–∞–º–µ—Ç–∫–∏:
                            </label>
                            <textarea
                                id="notes"
                                name="notes"
                                value={formData.notes}
                                onChange={handleChange}
                                className="order-detail__form-textarea"
                            />
                        </div>
                    </form>
                ) : (
                    <div className="order-detail__info">
                        <p>
                            <strong>–ö–ª–∏–µ–Ω—Ç:</strong>
                            <Link to={`/client/${order.clientId}`} className="order-detail__client-link">
                                {selectClientNameById(order.clientId)}
                            </Link>
                        </p>
                        <p>
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.status}
                        </p>
                        <p>
                            <strong>–î–∞—Ç–∞:</strong> {order.date}
                        </p>
                        <p>
                            <strong>–°—É–º–º–∞:</strong> {order.total} ‚ÇΩ
                        </p>
                        <p>
                            <strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {order.notes || "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫"}
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default OrderDetail;
